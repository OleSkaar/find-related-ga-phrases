{"version":3,"sources":["utils/Line.js","utils/Phrase.js","utils/Word.js","utils/removeInvalidLines.js","utils/PhraseContainer.js","utils/WordContainer.js","utils/parser.jsx","WordData.jsx","Wordbox.jsx","RelatedPhraseData.jsx","RelatedPrasesWindow.jsx","App.js","serviceWorker.js","index.js"],"names":["Line","phrase","count","this","parseInt","removeComma","countString","replace","Phrase","phraseString","id","relatedWords","wordObject","push","string","word","Word","relatedPhrases","phraseObject","removeInvalidLines","array","firstHeaderColumn","newArray","forEach","element","length","isCorrectLength","data","localeCompare","isNotEmpty","PhraseContainer","phrases","total","compare","a","b","wordACount","wordBCount","comparison","WordContainer","words","wordString","wordExists","include","console","log","sort","Parser","handleOnDrop","newData","line","lineObject","numberOfPhrases","includes","wordsInPhrase","split","undefined","find","addCount","numberOfWords","add","addRelatedWord","addRelatedPhrase","sortByCount","props","updateState","handleOnError","err","file","inputElem","reason","handleOnRemoveFile","onDrop","onError","addRemoveButton","onRemoveFile","Component","WordData","rowStyle","borderBottom","backgroundColor","wordId","clickedPhraseId","cellStyle","borderCollapse","padding","buttonStyle","display","fontSize","style","onClick","updateRelatedPhrases","Wordbox","tableStyle","width","margin","textAlign","isEmpty","tableRows","rowIndex","key","RelatedPhraseData","className","percentage","RelatedPhrasesWindow","totalCount","phraseIndex","toFixed","App","state","wordContainer","phraseContainer","setState","phraseId","rightSidebarStyle","minWidth","visibility","flexGrow","maxWidth","alignItems","justifyContent","updateWordAndPhrases","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.befe1031.chunk.js","sourcesContent":["class Line {\r\n    constructor(phrase, count) {\r\n        this.phrase = phrase\r\n        this.count = parseInt(this.removeComma(count))\r\n    }\r\n\r\n    removeComma(countString) {\r\n        return countString.replace(',', '')\r\n    }\r\n}\r\n\r\nexport default Line","class Phrase {\r\n    constructor(phraseString, count, id) {\r\n        this.phrase = phraseString\r\n        this.count = count\r\n        this.id = id\r\n        this.relatedWords = []\r\n    }\r\n\r\n    get words() {\r\n        let string = ''\r\n        for (const word of this.relatedWords) {\r\n            string += ` ${word}, `\r\n        }\r\n        \r\n        return string\r\n    }\r\n\r\n    addRelatedWord(wordObject) {\r\n        //console.log(`Adding ${wordObject.word}`)\r\n        //if (!this.relatedWords.includes(wordObject)) this.relatedWords.push(wordObject)\r\n        this.relatedWords.push(wordObject)\r\n        //console.log(this)\r\n    }\r\n}\r\n\r\nexport default Phrase","class Word {\r\n    constructor(word, count, id) {\r\n        this.word = word\r\n        this.count = count\r\n        this.id = id\r\n        this.relatedPhrases = []\r\n    }\r\n\r\n    addCount(count) {\r\n        this.count += count\r\n    }\r\n\r\n    addRelatedPhrase(phraseObject) {\r\n        this.relatedPhrases.push(phraseObject)\r\n    }\r\n}\r\n\r\nexport default Word","export const removeInvalidLines = (array, firstHeaderColumn) => {\r\n    const isCorrectLength = array => array.length > 2\r\n    const isNotHeader = string => string.localeCompare(firstHeaderColumn)\r\n    const isNotEmpty = string => string.length > 0\r\n\r\n    const newArray = []\r\n\r\n    array.forEach(element => {\r\n        if (isCorrectLength(element.data) && isNotHeader(element.data[0]) && isNotEmpty(element.data[0])) newArray.push(element)\r\n    })\r\n    \r\n   return newArray\r\n}","class PhraseContainer {\r\n    constructor() {\r\n        this.phrases = []\r\n    }\r\n\r\n    add(phraseObject) {\r\n        this.phrases.push(phraseObject)\r\n    }\r\n\r\n    get totalCount() {\r\n        let total = 0\r\n        for (const phrase of this.phrases) {\r\n            total += phrase.count\r\n        }\r\n\r\n        return total\r\n    }\r\n\r\n    get numberOfPhrases() {\r\n        return this.phrases.length\r\n    }\r\n\r\n    get isEmpty() {\r\n        return this.phrases.length === 0\r\n    }\r\n}\r\n\r\nexport default PhraseContainer","class WordContainer {\r\n    constructor() {\r\n        this.words = []\r\n    }\r\n\r\n    get numberOfWords() {\r\n        return this.words.length\r\n    }\r\n\r\n    get isEmpty() {\r\n        return this.words.length === 0\r\n    }\r\n\r\n    include(wordString) {\r\n        let wordExists = false\r\n        for (const word of this.words) {\r\n            if (word.word === wordString) {\r\n                wordExists = true\r\n                break\r\n            }\r\n        }\r\n        return wordExists\r\n    }\r\n\r\n    find(wordString) {\r\n        if (this.include(wordString)) {\r\n            for (const word of this.words) {\r\n                if (word.word === wordString) {\r\n                    return word\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            console.log(`Cannot find ${wordString}`)\r\n        }\r\n    }\r\n\r\n    add(wordObject) {\r\n        this.words.push(wordObject)\r\n    }\r\n\r\n    sortByCount() {\r\n        this.words.sort(compare)\r\n    }\r\n\r\n    \r\n}\r\n\r\n\r\nfunction compare(a, b) {\r\n    const wordACount = a.count\r\n    const wordBCount = b.count\r\n\r\n\r\n    let comparison = 0;\r\n\r\n    if (wordACount > wordBCount) {\r\n      comparison = -1;\r\n\r\n    } else if (wordACount < wordBCount) {\r\n      comparison = 1;\r\n    }\r\n\r\n    return comparison;\r\n  }\r\n\r\nexport default WordContainer","import React, { Component } from 'react'\r\nimport Line  from './Line.js'\r\nimport Phrase from './Phrase.js'\r\nimport Word from './Word.js'\r\nimport { removeInvalidLines } from './removeInvalidLines.js'\r\nimport PhraseContainer from './PhraseContainer.js'\r\nimport WordContainer from './WordContainer.js'\r\n\r\nimport { CSVReader } from 'react-papaparse'\r\n\r\nconst firstColumn = 'Search Term'\r\nconst space = ' '\r\n\r\nexport class Parser extends Component {\r\n  handleOnDrop = data => {\r\n    const words = new WordContainer()\r\n    const phrases = new PhraseContainer()\r\n    const newData = removeInvalidLines(data, firstColumn)\r\n\r\n    for (const line of newData) {\r\n      const lineObject = new Line(line.data[0], line.data[1])\r\n      const phrase = lineObject.phrase\r\n      const count = lineObject.count\r\n\r\n      const phraseObject = new Phrase(phrase, count, phrases.numberOfPhrases + 1)\r\n\r\n      if (phrase.includes(space)) {\r\n        const wordsInPhrase = phrase.split(space)\r\n\r\n        for (const wordString of wordsInPhrase) {\r\n          let wordObject = undefined\r\n\r\n          if (words.include(wordString)) {\r\n            wordObject = words.find(wordString)\r\n            wordObject.addCount(count)\r\n          } else {\r\n            wordObject = new Word(wordString, count, (words.numberOfWords + 1))\r\n            words.add(wordObject)\r\n          }\r\n          \r\n          phraseObject.addRelatedWord(wordObject)\r\n          wordObject.addRelatedPhrase(phraseObject)\r\n        }\r\n      } else {\r\n        let wordObject = undefined\r\n\r\n          if (words.include(phrase)) {\r\n            wordObject = words.find(phrase)    \r\n            wordObject.addCount(count)\r\n            wordObject.addRelatedPhrase(phraseObject)\r\n          } else {\r\n            wordObject = new Word(phrase, count, words.numberOfWords + 1)\r\n            wordObject.addRelatedPhrase(phraseObject)\r\n            words.add(wordObject)\r\n          }\r\n      }\r\n      phrases.add(phraseObject)\r\n    }\r\n    words.sortByCount()\r\n    this.props.updateState(words, phrases)\r\n  }\r\n\r\n  handleOnError = (err, file, inputElem, reason) => {\r\n    console.log(err)\r\n  }\r\n\r\n  handleOnRemoveFile = (data) => {\r\n    console.log('---------------------------')\r\n    console.log(data)\r\n    console.log('---------------------------')\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <CSVReader\r\n        onDrop={this.handleOnDrop}\r\n        onError={this.handleOnError}\r\n        addRemoveButton\r\n        onRemoveFile={this.handleOnRemoveFile}\r\n      >\r\n        <span>Drop CSV file here or click to upload.</span>\r\n      </CSVReader>\r\n    )\r\n  }\r\n}","import React from 'react';\r\n\r\nfunction WordData(props) {\r\n    const isClicked = props.wordId === props.clickedPhraseId\r\n\r\n    const rowStyle = {\r\n        borderBottom: \"1px solid gainsboro\",\r\n        backgroundColor: isClicked ? '#DBE0F0' : 'white'\r\n    }\r\n\r\n    const cellStyle = {\r\n        borderCollapse: 'collapse',\r\n        padding: '5px'\r\n    }\r\n\r\n    const buttonStyle = {\r\n        display: props.relatedPhrases.length > 1 ? 'inherit' : 'none',\r\n        fontSize: '1.1em'\r\n    }\r\n\r\n    return (\r\n        <tr style={rowStyle}>\r\n            <td style={cellStyle}>{props.wordString}</td>\r\n            <td style={cellStyle}>{props.count}</td>\r\n            <td style={cellStyle}>{props.relatedPhrases.length}</td>\r\n            <td style={cellStyle}>\r\n                <button \r\n                    style={buttonStyle}\r\n                    onClick={() => props.updateRelatedPhrases(props.relatedPhrases, props.wordId)}\r\n                >\r\n                    🡲\r\n                </button>\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default WordData;","import React from 'react'\r\nimport WordData from './WordData.jsx'\r\n\r\nfunction Wordbox(props) {\r\n  const tableStyle = {\r\n    width: '100%',\r\n    margin: 'auto',\r\n    borderCollapse: 'collapse',\r\n    textAlign: 'left',\r\n    display: props.isEmpty ? 'none' : 'table'\r\n  }\r\n\r\n  const tableRows = [];\r\n  let rowIndex = 0;\r\n  for (const word of props.words) {\r\n    tableRows.push(\r\n      <WordData\r\n        wordId={word.id}\r\n        key={rowIndex}\r\n        wordString={word.word}\r\n        count={word.count}\r\n        relatedPhrases={word.relatedPhrases}\r\n        clickedPhraseId={props.clickedPhraseId}\r\n        updateRelatedPhrases={props.updateRelatedPhrases}\r\n      />\r\n    )\r\n    rowIndex++\r\n  }\r\n  \r\n  return (  \r\n      <table style={tableStyle}>\r\n        <thead>\r\n          <tr>\r\n            <th><h2>Search phrase</h2></th>\r\n            <th><h2>Unique searches</h2></th>\r\n            <th><h2>Related Phrases</h2></th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {tableRows}\r\n        </tbody>\r\n      </table>\r\n  );\r\n}\r\n\r\nexport default Wordbox;","import React from 'react'\r\n\r\nfunction RelatedPhraseData(props) {\r\n    \r\n    return (\r\n        <tr className='tableRow'>\r\n            <td>{props.phrase}</td>\r\n            <td>{props.count}</td>\r\n            <td>{props.percentage}</td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default RelatedPhraseData;","import React from 'react'\r\nimport RelatedPhraseData from './RelatedPhraseData.jsx'\r\n\r\nfunction RelatedPhrasesWindow(props) {\r\n    let totalCount = 0;\r\n    for (const phrase of props.relatedPhrases) {\r\n        totalCount += phrase.count\r\n    }\r\n\r\n    const relatedPhrases = []\r\n    let phraseIndex = 0;\r\n    for (const phrase of props.relatedPhrases) {\r\n        const percentage = ((phrase.count / totalCount) * 100).toFixed(1)\r\n        relatedPhrases.push(\r\n            <RelatedPhraseData\r\n                key={phraseIndex}\r\n                phrase={phrase.phrase}\r\n                count={phrase.count}\r\n                percentage={`${percentage} %`}\r\n            />\r\n        )\r\n        phraseIndex++\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <table className='relatedPhraseWindow'>\r\n                <tbody>\r\n                    <tr>\r\n                        <th><h3>Related phrases</h3></th>\r\n                        <th><h3>Unique searches</h3></th>\r\n                        <th><h3>% of total</h3></th>\r\n                    </tr>\r\n                    {relatedPhrases}\r\n                    <tr>\r\n                        <td><strong>Total:</strong></td>\r\n                        <td><strong>{totalCount}</strong></td>\r\n                        <td><strong>100%</strong></td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RelatedPhrasesWindow;","import React from 'react';\nimport './App.css';\nimport { Parser } from './utils/parser.jsx'\nimport PhraseContainer from './utils/PhraseContainer.js'\nimport WordContainer from './utils/WordContainer.js'\nimport Wordbox from './Wordbox.jsx'\nimport RelatedPhrasesWindow from './RelatedPrasesWindow.jsx'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      wordContainer: new WordContainer(),\n      phraseContainer: new PhraseContainer(),\n      isEmpty: true,\n      relatedPhrases: [],\n      clickedPhraseId: undefined\n    }\n  }\n\n  updateWordAndPhrases(words, phrases) {\n    this.setState({\n      wordContainer: words,\n      phraseContainer: phrases,\n      isEmpty: words.isEmpty && phrases.isEmpty\n    })\n  }\n\n  updateRelatedPhrases(relatedPhrases, phraseId) {\n    this.setState({\n      relatedPhrases: relatedPhrases, \n      clickedPhraseId: phraseId})\n  }\n\n  render() {\n\n    const mainContentStyle = {\n      flexGrow: 2\n    }\n\n    const leftSidebarStyle = {\n      minWidth: '25%'\n    }\n\n    const rightSidebarStyle = {\n      minWidth: '25%',\n      visibility: this.state.relatedPhrases.length > 0 ? 'visible' : 'hidden',\n      flexGrow: 1\n    }\n\n    const flexboxContainer = {\n      maxWidth: '100vw',\n      display: 'flex',\n      alignItems: 'flex-start',\n      justifyContent: 'center'\n\n    }\n\n    const textBoxStyle = {\n      maxWidth: '40%',\n      margin: 'auto'\n    }\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>🔍 Find related phrases</h1>\n        </header>\n        <div style={textBoxStyle}>\n        <p>This is a tool to help analyze and organize site search data from Google Analytics.</p>\n          <p>To use it, navigate to Behavior {'>'} Site Search {'>'} Search Terms, choose the time span you want data for, and choose Export {'>'} CSV.</p>\n          <p>Then, upload the CSV with drag and drop or browse, and it will connect all phrases that contain the same word.</p>\n          <p>For instance, if 10 users have searched for 'sleeping bag', and 5 users have searched for 'red sleeping bag', the phraseContainer\n            'sleeping bag' will now have 15 unique searches, and 'red sleeping bag' will be marked as a related phrase to 'sleeping bag'.\n          </p>\n        </div>\n        <div style={flexboxContainer}>\n          <div style={leftSidebarStyle}></div>\n          <div style={mainContentStyle}>\n          \n            <Wordbox\n              isEmpty={this.state.isEmpty}\n              words={this.state.wordContainer.words}\n              phrases={this.state.phraseContainer.phrases}\n              clickedPhraseId={this.state.clickedPhraseId}\n              updateRelatedPhrases={(relatedPhrases, phraseId) => this.updateRelatedPhrases(relatedPhrases, phraseId)}\n            />\n            <Parser\n              onDrop={this.handleOnDrop}\n              onError={this.handleOnError}\n              addRemoveButton\n              onRemoveFile={this.handleOnRemoveFile}\n              updateState={(words, phrases) => this.updateWordAndPhrases(words, phrases)}\n            >\n              <span>Click to upload.</span>\n            </Parser>\n          </div>\n          <div style={rightSidebarStyle}>\n            <RelatedPhrasesWindow\n              relatedPhrases={this.state.relatedPhrases}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}